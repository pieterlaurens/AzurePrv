using Deloitte.PipelineFramework.PlatformConfig.Enums;
using Deloitte.PipelineFramework.PlatformConfig.Params;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace Deloitte.PipelineFramework.PlatformConfig
{
    /// <summary>
    /// The configuration object for an API call. Contains a list of individual configuration objects for the components.
    /// </summary>
    public class ComponentParam : DeloitteObject
    {
        /// <summary>
        /// The name of the package this config is meant for.
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        [JsonProperty(Required = Newtonsoft.Json.Required.Always)]
        public PackageName PackageName { get; set; }

        /// <summary>
        /// The type of project (i.e. the solution or product) the data mart is visualized for.
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public ProjectType ProjectType { get; set; }

        #region WebShopFocusReports
        /// <summary>
        /// Configuration for the CreateStatsOverTopicsForCompanies component.
        /// </summary>
        public CreateStatsParams CreateStatsParams { get; set; }

        /// <summary>
        /// Configuration for the AddScoresForRiskText component
        /// </summary>
        public ScoreRiskTextParams ScoreRiskTextParams { get; set; }

        /// <summary>
        /// Configuration for the components loading the dimension tables
        /// </summary>
        public LoadCalendarParams LoadCalendarParams { get; set; }
        public LoadCompaniesParams LoadCompaniesParams { get; set; }
        public LoadCountriesParams LoadCountriesParams { get; set; }
        public LoadDealsParams LoadDealsParams { get; set; }
        public LoadIndustriesParams LoadIndustriesParams { get; set; }
        public LoadDocumentsParams LoadDocumentsParams { get; set; }
        public LoadParagraphsParams LoadParagraphsParams { get; set; }
        public LoadSubjectTreeParams LoadSubjectTreeParams { get; set; }
        public LoadSubjectScoreSourcesParams LoadSubjectScoreSourcesParams { get; set; }

        /// <summary>
        /// Configuration for the components loading the fact tables
        /// </summary>
        public LoadTechnologyScoresParams LoadTechnologyScoresParams { get; set; }
        public LoadDealScoresParams LoadDealScoresParams { get; set; }
        public LoadSubjectScoresParams LoadSubjectScoresParams { get; set; }

        /// <summary>
        /// Configuration for the components loading the web tables
        /// </summary>
        public RefreshWebDataParams RefreshWebDataParams { get; set; }
        #endregion

        #region IDResolving
        #region ProcessInput
        /// <summary>
        /// Configuration for the component loading files generated by the Orbis Matching Software
        /// </summary>
        public IEnumerable<ImportMatchingSoftwareFileParams> ImportMatchingSoftwareFileParams { get; set; }
        #endregion
        #endregion

        /// <summary>
        /// Contains the configurable options for the GetKeywordProfile apis.
        /// <para>This object could replace the individual items in this class.</para>
        /// </summary>
        public KeywordProfileParam GetKeywordProfileParams { get; set; }

        /// <summary>
        /// Contains the configurable options for the package to (re)import a product score table in Excel.
        /// </summary>
        public ImportProjectScoreTableParams ImportProjectScoreTableParams { get; set; }

        /// <summary>
        /// Contains the configurable options for the GetKeywordProfile apis.
        /// <para>This object could replace the individual items in this class.</para>
        /// </summary>
        public CreatePrepareEnvironmentParams CreatePrepareEnvironmentParams { get; set; }

        #region EnumeratedConfigurations
        /// <summary>
        /// A list of configurations for ways to retrieve companies for a long list. For each element, companies retrieved in that way are added.
        /// </summary>
        public IEnumerable<RetrievalParam> RetrievalParams { get; set; }

        /// <summary>
        /// A list of configurations for scoring companies. Each element in this list corresponds to a column in the longlist.
        /// </summary>
        public IEnumerable<ScoringParam> ScoringParams { get; set; }

        /// <summary>
        /// 
        /// </summary>
        public IEnumerable<ScoringParam> ScoreGroupingParams { get; set; }

        /// <summary>
        /// A list of configurations for retrieving nodes to be shown in the landscape.
        /// </summary>
        public IEnumerable<NodeSelectionParam> NodeSelectionParams { get; set; }

        /// <summary>
        /// A list of configurations for scoring the nodes in the landscape. Node scores are generally numeric
        /// values for a node, where each node can receive multiple values (by companies, by subject mentioned in CPC classes etc.)
        /// </summary>
        public IEnumerable<ScoreLandscapeNodesParam> ScoreLandscapeNodesParams { get; set; }
        
        /// <summary>
        /// A list of configurations for retrieving properties in the landscape. Each property has one value per node; for example size, label etc.
        /// </summary>
        public IEnumerable<GetNodePropertiesParam> GetNodePropertiesParams { get; set; }

        /// <summary>
        /// A list of answers; each individual answer references its own question ID and company ID;
        /// the company IDs in a single pipeline run are typically all the same when difference questions are answered for a single company.
        /// </summary>
        public IEnumerable<AnswerParam> AnswerParams { get; set; }
        #endregion

        #region ApproximateDistanceIn2D
        /// <summary>
        /// The input distances can be transformed in two ways, apart from 'none'.
        ///   'lookup': a random distribution of points is drawn, and the original distances are replaced by the ordered distances between the random points (default)
        ///   'log': distances are transformed as new_distance = log(original_distance).
        /// This parameter is not currently passed to the matlab module.
        /// </summary>
        public string NormalizeDistance { get; set; }

        /// <summary>
        /// The random seed used in the Matlab module for the initialization of the MDS algorithm, and for the drawing of random points for the lookup distance transform.
        /// </summary>
        public int? RandomSeed { get; set; }

        /// <summary>
        /// The number of iterations the MDS algorithm is allowed to make while trying to converge.
        /// This parameter is not currently passed to the matlab module.
        /// </summary>
        public int? MaxIterations { get; set; }

        /// <summary>
        /// The algorithm to use to perform multidimensional scaling. This parameter is not currently passed to the matlab module.
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public MdsAlgorithm Algorithm { get; set; }
        #endregion

        #region GenerateMatlabTable
        /// <summary>
        /// The year span that is added to the Matlab table for each financial, financial ratio and IP metric. The number of columns in the Matlab table scales linearly with the number of years, as there is a separate column for each year and metric.
        /// </summary>
        public string YearSpan { get; set; }

        /// <summary>
        /// A pipe separated list of financial attributes (big integers) to add to the Matlab table. An empty column is returned for non-existent financials. Admitted values are the unique values of the type column for company_financial in the Data Handler.
        /// </summary>
        public string Financials { get; set; }
        
        /// <summary>
        /// A pipe separated list of financial ratios (reals) to add to the Matlab table. An empty column is returned for non-existent ratios. Admitted values are the unique values of the type column for company_financial_ratio in the Data Handler.
        /// Not yet implemented
        /// </summary>
        public string FinancialRatios { get; set; }
        
        /// <summary>
        /// A pipe separated list of IP metrics to add to the Matlab table. An empty column is returned for non-existent IP metrics.
        /// Not yet implemented
        /// </summary>
        public string IpMetrics { get; set; }
        #endregion

        #region PrepareForVisualization
        /// <summary>
        /// A pipe seperated list of title:where statements to add to the longlist.
        /// </summary>
        public string LongListFilters { get; set; }
        #endregion

        /// <summary>
        /// A list of company IDs a|b|c, that are excluded (not included) in a company retrieval run.
        /// </summary>
        public string CompanyIdBlacklist { get; set; }

        /// <summary>
        /// Parameters for the package to identify additional candidates for a short list in a universe, based on the current items on the short list and their attributes.
        /// </summary>
        public MakeCompanySuggestionParams CompanySuggestionParams { get; set; }

        #region MakeCompanySuggestion
        /// <summary>
        /// A pipe seperated list of company IDs that serve as the positive instances; for which similar ones need to be suggested.
        /// </summary>
        public string PositiveInstance { get; set; }

        /// <summary>
        /// A pipe seperated list of company IDs that serve as the negative instances
        /// </summary>
        public string NegativeInstance { get; set; }

        /// <summary>
        /// The name of the focuslist to replace or create.
        /// </summary>
        public string FocuslistName { get; set; }
        #endregion

        #region BagOfWords
        /// <summary>
        /// The set of words (in SQL FT syntax) for calculating bag of word profiles in a classification scheme, notably CPC.
        /// </summary>
        public string BagOfWords
        {
            get
            {
                return _BagOfWords == null ? null : _BagOfWords.Aggregate((a, b) => a + "|" + b);
            }
            set
            {
                _BagOfWords = value == null ? null : value.Split('|');
            }
        }

        private IEnumerable<string> _BagOfWords = null;

        /// <summary>
        /// For Bag-of-word based retrieval, currently only on company text. A set of pipe-separated contains() clauses. AND can be implemented within the clause as a NEAR statement (3d~printing), and the OR with separate statements (3d~printing|additive~manufacturing).
        /// <para>Currently its not possible to use double quotes in the contains clauses.</para>
        /// <para>Work is being done on a word parser that generates more elaborate Contains statements (Sanne)</para>
        /// <seealso cref="BagOfWords"/>
        /// </summary>
        public IEnumerable<string> GetBagOfWords()
        {
            return _BagOfWords;
        }
        /// <summary>
        /// For Bag-of-word based retrieval, currently only on company text. A set of pipe-separated contains() clauses. AND can be implemented within the clause as a NEAR statement (3d~printing), and the OR with separate statements (3d~printing|additive~manufacturing).
        /// <para>Currently its not possible to use double quotes in the contains clauses.</para>
        /// <para>Work is being done on a word parser that generates more elaborate Contains statements (Sanne)</para>
        /// <seealso cref="BagOfWords"/>
        /// </summary>
        public ComponentParam SetBagOfWords(IEnumerable<string> words)
        {
            _BagOfWords = words;
            return this;
        }
        #endregion 

    }

    
}
